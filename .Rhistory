filter(CATEGORY == '비타민음료')
data <- data[,-c(1,2)]
x <- as.data.frame(data)
trans <- as.matrix(x,"Transaction")
trans
# 3. apriori 함수를 이용해서 연관관계를 분석한다.
rules <- apriori(trans, parameter=list(supp=0.2, conf=0.6, target = "rules"))
rules
# support: 지지도, confidence:신뢰도, lift: 향상도, count
inspect(sort(rules))
library(tree)
library(tree)
data_raw <- read.csv('Data/sales.csv')
data <- data_raw %>%
filter(CATEGORY == '비타민음료')
data
data <- data[,-c(1,2)]
data
data_raw <- read.csv('Data/sales.csv')
data <- data_raw %>%
filter(CATEGORY == '비타민음료')
data
data2<-sample(1:nrow(data), size=nrow(data)*0.7, replace=F)
data2
idx<-sample(1:nrow(data), size=nrow(data)*0.7, replace=F)
data_raw <- read.csv('Data/sales.csv')
Vitamin <- data_raw %>%
filter(CATEGORY == '비타민음료')
idx<-sample(1:nrow(Vitamin), size=nrow(Vitamin)*0.7, replace=F)
data_raw <- read.csv('Data/sales.csv')
vitamin <- data_raw %>%
filter(CATEGORY == '비타민음료')
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.7, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
dim(vitamin_train); dim(vitamin_test)
lm_fit<-lm(qty~., data=vitamin_train)
lm_fit<-lm(Qty~., data=vitamin_train)
vitamin_train
data_raw <- read.csv('Data/sales.csv')
vitamin <- data_raw %>%
filter(CATEGORY == '비타민음료')
vitamin <- vitamin[,-c(1,2)]
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.7, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
dim(vitamin_train); dim(vitamin_test)
lm_fit<-lm(QTY~., data=vitamin_train)
summary(vitamin)
summary(lm_fit)
tree_fit<-tree(QTY~., data=vitamin_train)
summary(tree_fit)
data_raw <- read.csv('Data/sales.csv')
vitamin <- data_raw %>%
filter(CATEGORY == '비타민음료')
vitamin <- vitamin[,-c(1,2)]
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.7, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
dim(vitamin_train); dim(vitamin_test)
tree_fit<-tree(QTY~., data=vitamin_train)
summary(tree_fit)
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.7, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
dim(vitamin_train); dim(vitamin_test)
tree_fit<-tree(QTY~., data=vitamin_train)
summary(tree_fit)
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.7, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
tree_fit<-tree(QTY~., data=vitamin_train)
summary(tree_fit)
# ITEM_CNT	상품품목수
# QTY	판매량
# PRICE	가격
# MAXTEMP	기온
# SALEDAY	영업(판매)일수
# RAIN_DAY	강우일수
# HOLIDAY	휴일일수
plot(tree_fit)
text(tree_fit, pretty=0)
tree_yhat<-predict(tree_fit, newdata=vitamin_test)
mean((tree_yhat-vitamin_test$QTY)^2)
sqrt(mean((tree_yhat-vitamin_test$QTY)^2))
tree_yhat<-predict(tree_fit, newdata=vitamin_test)
sqrt(mean((tree_yhat-vitamin_test$QTY)^2))
library(rpart)
rpart_fit<-rpart(QTY~., data=vitamin_test)
summary(rpart_fit)
library(randomForest)
set.seed(123)
rf_fit=randomForest(QTY~., data=vitamin_train, mtry=3, importance=T)
plot(rf_fit)
importance(rf_fit)
rf_fit=randomForest(QTY~., data=vitamin_train, mtry=2, importance=T)
plot(rf_fit)
rf_fit=randomForest(QTY~., data=vitamin_train, mtry=4, importance=T)
plot(rf_fit)
rf_fit=randomForest(QTY~., data=vitamin_train, mtry=3, importance=T)
plot(rf_fit)
rf_fit=randomForest(QTY~., data=vitamin_train, mtry=6, importance=T)
plot(rf_fit)
importance(rf_fit)
varImpPlot(rf_fit)
plot(rf_fit)
rf_pdt=predict(rf_fit, newdata = vitamin_test)
foo_rf=mean((rf_pdt-vitamin_test$QTY)^2)
sqrt(foo_rf)
# Decision Tree, 72p
tree_fit<-tree(QTY~., data=vitamin_train)
summary(tree_fit)
plot(tree_fit)
text(tree_fit, pretty=0)
tree_yhat<-predict(tree_fit, newdata=vitamin_test)
sqrt(mean((tree_yhat-vitamin_test$QTY)^2))
# 다중 회귀분석 69p
lm_fit<-lm(QTY~., data=vitamin_train)
summary(lm_fit)
lm_fit2=step(lm_fit, method='both')
summary(lm_fit2)
data_raw <- read.csv('Data/sales.csv')
vitamin <- data_raw %>%
filter(CATEGORY == '비타민음료')
vitamin <- vitamin[,-c(1,2)]
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.7, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
dim(vitamin_train); dim(vitamin_test)
# 다중 회귀분석 69p
lm_fit<-lm(QTY~., data=vitamin_train)
summary(lm_fit)
data_raw <- read.csv('Data/sales.csv')
vitamin <- data_raw %>%
filter(CATEGORY == '비타민음료')
vitamin <- vitamin[,-c(1,2)]
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.7, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
dim(vitamin_train); dim(vitamin_test)
# 다중 회귀분석 69p
lm_fit<-lm(QTY~., data=vitamin_train)
summary(lm_fit)
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.7, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
# 다중 회귀분석 69p
lm_fit<-lm(QTY~., data=vitamin_train)
summary(lm_fit)
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.6, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
dim(vitamin_train); dim(vitamin_test)
# 다중 회귀분석 69p
lm_fit<-lm(QTY~., data=vitamin_train)
summary(lm_fit)
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.5, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
dim(vitamin_train); dim(vitamin_test)
# 다중 회귀분석 69p
lm_fit<-lm(QTY~., data=vitamin_train)
summary(lm_fit)
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.7, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
dim(vitamin_train); dim(vitamin_test)
# 다중 회귀분석 69p
lm_fit<-lm(QTY~., data=vitamin_train)
summary(lm_fit)
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.5, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
dim(vitamin_train); dim(vitamin_test)
# 다중 회귀분석 69p
lm_fit<-lm(QTY~., data=vitamin_train)
summary(lm_fit)
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.5, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
dim(vitamin_train); dim(vitamin_test)
# 다중 회귀분석 69p
lm_fit<-lm(QTY~., data=vitamin_train)
summary(lm_fit)
idx<-sample(1:nrow(vitamin), size=nrow(vitamin)*0.7, replace=F)
vitamin_train<-vitamin[idx,]
vitamin_test<-vitamin[-idx,]
dim(vitamin_train); dim(vitamin_test)
# 다중 회귀분석 69p
lm_fit<-lm(QTY~., data=vitamin_train)
summary(lm_fit)
lm_fit2=step(lm_fit, method='both')
summary(lm_fit2)
lm_pdt=predict(lm_fit2, newdata = vitamin_test)
lm_pdt
lm_pdt95=predict(lm_fit2, newdata = vitamin_test, interval='confidence')
lm_pdt95
mean((lm_yhat2-vitamin_test$QTY)^2)
lm_pdt95=predict(lm_fit2, newdata = vitamin_test, interval='confidence')
lm_pdt95
mean((lm_pdt95-vitamin_test$QTY)^2)
mean((lm_pdt-vitamin_test$QTY)^2)
par(mfrow=c(2,2))
plot(lm_fit2)
shapiro.test(vitamin$QTY)
foo=mean((lm_pdt-vitamin_train$QTY)^2)
sqrt(foo)
#nnet 이용한 인공신경망 분석
library(nnet)
# 인공 신경망 기법
#1.정규화 함수 작성
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
# 인공 신경망 기법
#1.정규화 함수 작성
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
vitamin_train_norm=as.data.frame(sapply(vitamin_train, normalize))
vitamin_test_norm=as.data.frame(sapply(vitamin_test, normalize))
#nnet 이용한 인공신경망 분석
nnet_fit=nnet(QTY~.,data=vitamin_train_norm,size=5) #인공 신경망 적합하기
nnet_pdt=predict(nnet_fit, vitamin_test_norm, type='raw')#예측결과생성
hoo_nnet=mean((nnet_pdt-vitamin_test_norm$medv)^2)#평균제곱오차 계산
hoo_nnet
sqrt(hoo_nnet)
hoo_nnet=mean((nnet_pdt-vitamin_test_norm$QTY)^2)#평균제곱오차 계산
hoo_nnet
sqrt(hoo_nnet)
library(neuralnet)
#neuralnet 인공신경망 분석
neural_fit=neuralnet(QTY~., data=vitamin_train_norm, hidden=2)
neural_pdt=compute(neural_fit, vitamin_test_norm)
neural_pdt
boo_neur=mean((neural_pdt$net.result-vitamin_test_norm$QTY)^2)
boo_neur
sqrt(boo_neur)
plot(neural_fit)
sqrt(boo_neur)
sqrt(foo_rf)
data4['Diff'] <- abs(data4['pre_QTY'] - data4['QTY'])
data4['ACC'] <- abs((data4['QTY'] - data4['Diff'])) / data4['QTY'] * 100
data4
# 정확도 평균
ACC_mean <- data4 %>%
select(ACC) %>%
filter(ACC <= 100) %>%
summarise(avarage=mean(ACC))
ACC_mean
install.packages(c("caret", "Deducer", "e1071", "leaps", "randomForest"))
install.packages("nortest")
install.packages("gvlma")
install.packages(c("corrplot", "neuralnet", "tree"))
# 패키지 준비
library(dplyr)
library(stringr)
library(ggplot2)
# 데이터 불러오기
data_raw <- read.csv('Data/sales.csv')
head(data_raw)
# 데이터 스포츠,이온음료로 필터링
data <- data_raw %>%
filter(CATEGORY == '비타민음료')
data <- data[,-c(1,2)]
head(data)
# 해당 데이터의 정규성 검토를 함
shapiro.test(data$QTY)
# 상과관계 분석
cor(data)
######################################################################################
# 산점도 그려보기
pairs(data)
# Linear Regression Model
(fit1 <- lm(QTY~., data = data))
summary(fit1)
anova(fit1)
# 3. stepwise regression
step(fit1, direction = 'both')
# 4. All possible regression
library(leaps)
subsets1 <- regsubsets(QTY~., data = data,
method = 'seqrep', nbest = 6)  #삭제하는것을 반복
plot(subsets1)
par(mfrow = c(2, 2))
subsets1 <- regsubsets(QTY~., data = data,
method = 'seqrep', nbest = 6)  #삭제하는것을 반복
plot(subsets1)
subsets2 <- regsubsets(QTY~., data = data,
method = 'exhaustive', nbest = 6)
plot(subsets2)
par(mfrow = c(2, 1))
subsets1 <- regsubsets(QTY~., data = data,
method = 'seqrep', nbest = 6)  #삭제하는것을 반복
plot(subsets1)
subsets2 <- regsubsets(QTY~., data = data,
method = 'exhaustive', nbest = 6)
plot(subsets2)
par(mfrow = c(1, 2))
subsets1 <- regsubsets(QTY~., data = data,
method = 'seqrep', nbest = 6)  #삭제하는것을 반복
plot(subsets1)
subsets2 <- regsubsets(QTY~., data = data,
method = 'exhaustive', nbest = 6)
plot(subsets2)
# 데이터 불러오기
data_raw <- read.csv('Data/sales.csv')
head(data_raw)
# 데이터 스포츠,이온음료로 필터링
data <- data_raw %>%
filter(CATEGORY == '비타민음료')
data <- data[,-c(1,2)]
# 해당 데이터의 정규성 검토를 함
shapiro.test(data$QTY)
# 상과관계 분석
cor(data)
######################################################################################
# 산점도 그려보기
pairs(data)
# Linear Regression Model
(fit1 <- lm(QTY~., data = data))
summary(fit1)
anova(fit1)
# Stepwise regression
# 1. backward elimination
step(fit1, direction = 'backward')
# 2. forward selection
fit2 <- lm(QTY~1, data = data)
step(fit2,
direction = "forward",
scope = ~ITEM_CNT + PRICE + MAXTEMP + SALEDAY + RAIN_DAY + HOLIDAY)
# 3. stepwise regression
step(fit1, direction = 'both')
# 4. All possible regression
library(leaps)
par(mfrow = c(1, 2))
subsets1 <- regsubsets(QTY~., data = data,
method = 'seqrep', nbest = 6)  #삭제하는것을 반복
plot(subsets1)
subsets2 <- regsubsets(QTY~., data = data,
method = 'exhaustive', nbest = 6)
plot(subsets2)
## HOLIDAY, SALEDAY 변수를 뺀 모델을 fit3로 지정
(fit3 <- lm(QTY ~ ITEM_CNT + PRICE + MAXTEMP + RAIN_DAY, data = data))
# Checking Assumptions
par(mfrow = c(2, 2))
plot(fit3)
## HOLIDAY, SALEDAY 변수를 뺀 모델을 fit3로 지정
(fit3 <- lm(QTY ~ ITEM_CNT + PRICE + MAXTEMP + RAIN_DAY, data = data))
summary(fit3)
# Checking Assumptions
par(mfrow = c(2, 2))
plot(fit3)
# 1. 정규성 (normality)
qqnorm(fit3$residuals) ; qqline(fit3$residuals)
par(mfrow = c(1, 1))
# 1. 정규성 (normality)
qqnorm(fit3$residuals) ; qqline(fit3$residuals)
# 1. 정규성 (normality)
qqnorm(fit3$residuals) ; qqline(fit3$residuals)
par(mfrow = c(1, 2))
# 1. 정규성 (normality)
qqnorm(fit3$residuals) ; qqline(fit3$residuals)
# 1. 정규성 (normality)
qqnorm(fit3$residuals) ; qqline(fit3$residuals)
# 1. 정규성 (normality)
qqnorm(fit3$residuals) ; qqline(fit3$residuals)
shapiro.test(fit3$residuals)
plot(fit3)
par(mfrow = c(2, 2))
plot(fit3)
par(mfrow = c(1, 1))
# 1. 정규성 (normality)
qqnorm(fit3$residuals) ; qqline(fit3$residuals)
shapiro.test(fit3$residuals)
# 데이터 스포츠,이온음료로 필터링
data <- data_raw %>%
filter(CATEGORY == '비타민음료')
data <- data[,-c(1,2)]
# 해당 데이터의 정규성 검토를 함
shapiro.test(data$QTY)
# 상과관계 분석
cor(data)
# Linear Regression Model
(fit1 <- lm(QTY~., data = data))
summary(fit1)
anova(fit1)
# Stepwise regression
# 1. backward elimination
step(fit1, direction = 'backward')
# 2. forward selection
fit2 <- lm(QTY~1, data = data)
step(fit2,
direction = "forward",
scope = ~ITEM_CNT + PRICE + MAXTEMP + SALEDAY + RAIN_DAY + HOLIDAY)
# 3. stepwise regression
step(fit1, direction = 'both')
# 4. All possible regression
library(leaps)
par(mfrow = c(1, 2))
subsets1 <- regsubsets(QTY~., data = data,
method = 'seqrep', nbest = 6)  #삭제하는것을 반복
plot(subsets1)
subsets2 <- regsubsets(QTY~., data = data,
method = 'exhaustive', nbest = 6)
plot(subsets2)
## HOLIDAY, SALEDAY 변수를 뺀 모델을 fit3로 지정
(fit3 <- lm(QTY ~ ITEM_CNT + PRICE + MAXTEMP + RAIN_DAY, data = data))
summary(fit3)
# Checking Assumptions
par(mfrow = c(2, 2))
plot(fit3)
par(mfrow = c(1, 1))
# 1. 정규성 (normality)
qqnorm(fit3$residuals) ; qqline(fit3$residuals)
shapiro.test(fit3$residuals)
# 2. 등분산성 (homoscedasticity)
# 3. 선형성 (linearity)
library(gvlma)
gvmodel <- gvlma(fit3)
summary(gvmodel)
# 4. 독립성 (indepandence)
library(car)
durbinWatsonTest(fit3)
## HOLIDAY, SALEDAY, RAINDAY 변수를 뺀 모델을 fit4로 지정
(fit4 <- lm(QTY ~ ITEM_CNT + PRICE + MAXTEMP, data = data))
summary(fit4)
shapiro.test(fit4$residuals)
# 1. 정규성 (normality)
qqnorm(fit4$residuals) ; qqline(fit4$residuals)
# 2. 등분산성 (homoscedasticity)
# 3. 선형성 (linearity)
library(gvlma)
gvmodel <- gvlma(fit4)
summary(gvmodel)
# 4. 독립성 (indepandence)
library(car)
durbinWatsonTest(fit4)
### 결론
# AIC값은
AIC(fit3, fit4)
# fit4의 다중회귀식을 만들어서 QTY 예측
data4 <- data
data4['pre_QTY'] = round((-1188.2848) + (data4['ITEM_CNT'] * (23.0316)) + (data4['PRICE'] * (0.7479)) + (data4['MAXTEMP'] * (13.6824)), 0)
data4
data4['Diff'] <- abs(data4['pre_QTY'] - data4['QTY'])
data4['ACC'] <- abs((data4['QTY'] - data4['Diff'])) / data4['QTY'] * 100
data4
data4
data4['Diff'] <- abs(data4['pre_QTY'] - data4['QTY'])
data4['ACC'] <- abs((data4['QTY'] - data4['Diff'])) / data4['QTY'] * 100
data4
# 정확도 평균
ACC_mean <- data4 %>%
select(ACC) %>%
filter(ACC <= 100) %>%
summarise(avarage=mean(ACC))
ACC_mean
# Linear Regression Model
(fit1 <- lm(QTY~., data = data))
summary(fit1)
anova(fit1)
# 4. All possible regression
library(leaps)
par(mfrow = c(1, 2))
subsets1 <- regsubsets(QTY~., data = data,
method = 'seqrep', nbest = 6)  #삭제하는것을 반복
plot(subsets1)
subsets2 <- regsubsets(QTY~., data = data,
method = 'exhaustive', nbest = 6)
plot(subsets2)
subsets3 <- regsubsets(QTY~., data = data)
plot(subsets3)
regsubsets(QTY~., data = data,
method = 'exhaustive', nbest = 6)
subsets3 <- regsubsets(QTY~., data = data, scale = "adjr2")
subsets3 <- regsubsets(QTY~., data = data)$"adjr2"
plot(subsets3)
subsets3 <- regsubsets(QTY~., data = data)$"BIC"
plot(subsets3)
subsets3 <- regsubsets(QTY~., data = data)$bic
plot(subsets3)
subsets3 <- regsubsets(QTY~., data = data)$adjr2
plot(subsets3)
summary(regsubsets(QTY ~ ., data = data))$bic
plot(summary(regsubsets(QTY ~ ., data = data))$bic)
plot(regsubsets(QTY ~ ., data = data), scale = "adjr2")
plot(regsubsets(QTY ~ ., data = data), scale = "bic")
plot(regsubsets(QTY ~ ., data = data, method = 'seqrep', nbest = 6), scale = "adjr2")
plot(regsubsets(QTY ~ ., data = data, method = 'seqrep', nbest = 6), scale = "bic")
plot(subsets1)
subsets2 <- regsubsets(QTY~., data = data,
method = 'exhaustive', nbest = 6)
plot(subsets2)
## HOLIDAY, SALEDAY 변수를 뺀 모델을 fit3로 지정
(fit3 <- lm(QTY ~ ITEM_CNT + PRICE + MAXTEMP + RAIN_DAY, data = data))
# Checking Assumptions
par(mfrow = c(2, 2))
plot(fit4)
plot(fit3)
## HOLIDAY, SALEDAY 변수를 뺀 모델을 fit3로 지정
(fit3 <- lm(QTY ~ ITEM_CNT + PRICE + MAXTEMP + RAIN_DAY, data = data))
summary(fit3)
# Checking Assumptions
par(mfrow = c(2, 2))
plot(fit3)
## HOLIDAY, SALEDAY, RAINDAY 변수를 뺀 모델을 fit4로 지정
(fit4 <- lm(QTY ~ ITEM_CNT + PRICE + MAXTEMP, data = data))
summary(fit4)
# Checking Assumptions
par(mfrow = c(2, 2))
plot(fit4)
